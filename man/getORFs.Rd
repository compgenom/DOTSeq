% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/annotation.R
\name{getORFs}
\alias{getORFs}
\title{Extract Genomic ORFs from Transcript Sequences}
\usage{
getORFs(
  sequences,
  annotation,
  organism = "Homo sapiens",
  circ_seqs = "chrM",
  start_codon = "ATG",
  stop_codon = "TAA|TAG|TGA",
  min_len = 0,
  longest_orf = TRUE,
  verbose = TRUE
)
}
\arguments{
\item{sequences}{Input transcript sequences. Can be a character string
(path to a FASTA file), a \code{DNAStringSet} object, or a
\code{BSgenome} object.}

\item{annotation}{Transcript annotation. Can be a character string
(path to a GTF or GFF file) or a \code{TxDb} object.}

\item{organism}{Character string specifying the organism name (used only
when building a TxDb from a GTF/GFF file). Default is
\code{"Homo sapiens"}.}

\item{circ_seqs}{Character vector of circular sequences to exclude
(e.g., \code{"chrM"}). Default is \code{"chrM"}.}

\item{start_codon}{Character string specifying the start codon(s)
(e.g., \code{"ATG"}). Default is \code{"ATG"}.}

\item{stop_codon}{Character string specifying stop codon(s), separated
by \code{"|"} (e.g., \code{"TAA|TAG|TGA"}). Default is
\code{"TAA|TAG|TGA"}.}

\item{min_len}{Integer specifying the minimum ORF length in bases.
Default is \code{0}.}

\item{longest_orf}{Logical. If \code{TRUE}, only the longest ORF per
region is returned. Default is \code{TRUE}.}
}
\value{
A \code{GRanges} object containing genomic coordinates of ORFs.
}
\description{
This function identifies open reading frames (ORFs) from transcript
sequences and maps them to genomic coordinates using either a GTF/GFF
annotation file or a TxDb object. It supports input sequences as a
FASTA file, a DNAStringSet object, or a BSgenome object.
}
\details{
The function uses \code{findORFsFasta()} to identify ORFs from transcript
sequences, filters for ORFs on the positive strand, and optionally merges
overlapping ORFs using \code{reduce()}. It then maps transcript-relative
coordinates to genomic coordinates using exon annotations extracted from
a TxDb object.
}
\examples{
# Use a BSgenome and TxDb
if (requireNamespace("TxDb.Hsapiens.UCSC.hg38.knownGene", quietly = TRUE) &&
    requireNamespace("BSgenome.Hsapiens.UCSC.hg38", quietly = TRUE) &&
    requireNamespace("GenomicFeatures", quietly = TRUE)) {

    library(BSgenome.Hsapiens.UCSC.hg38)
    library(TxDb.Hsapiens.UCSC.hg38.knownGene)
    library(GenomicFeatures)

    # Load genome and TxDb
    genome <- BSgenome.Hsapiens.UCSC.hg38
    txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene

    # Get exons grouped by transcript
    exons_by_tx <- exonsBy(txdb, by = "tx", use.names = TRUE)

    # Select a single transcript for demonstration
    tx1 <- head(exons_by_tx, 1)

    # Extract transcript sequence
    tx_seqs <- extractTranscriptSeqs(genome, tx1)

    # Run getORFs on the transcript sequence
    orfs <- getORFs(
        sequences = tx_seqs,
        annotation = txdb
    )
    print(orfs)
}

}
